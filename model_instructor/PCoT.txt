INPUT: Analyze Recent Subsequence as primary forecasting basis and Historical Representative Subsequence as auxiliary support.
(1) Recent Subsequence: [value_1, value_2, ...];
(2) Representative Subsequence: R_1: [value_1, ...], R_2: [value_1, ...], ..., R_n: [value_1, ...].

- Outlier
  - Sudden Spike: Sharp, short-lived peak with full reversion
  - Level Shift: Abrupt and sustained change in baseline

- Trend
  - Upward: Long-term increase
  - Downward: Long-term decrease

- Volatility
  - Increased: Rising fluctuation magnitude
  - Decreased: Declining fluctuation magnitude

- Seasonal
  - Fixed: Stable recurring cycles
  - Shifting: Changing amplitude in recurring cycles

Pattern Priority (for dominance conflicts):
1. Outlier > 2. Trend > 3. Seasonal > 4. Volatility

STEP 1: PATTERN CLASSIFICATION
Goal: Assign dominant pattern labels to each Historical Representative Subsequence.

Instructions:
1. Assign one Primary-Pattern: Outlier / Trend / Seasonal / Volatility
2. Assign one corresponding Sub-Pattern from the pattern tree
3. Apply the Pattern Priority rule in case of ambiguity
4. The Count of output labels must equal the Count of representative sequences
5. Maintain strict JSON format

Output Format:
["Primary-Pattern, Sub-Pattern", ..., "Primary-Pattern, Sub-Pattern"]

STEP 2: PATTERN-GUIDED FORECASTING
Goal: Predict the next 48 values for the Recent Subsequence using pattern-aligned guidance.

Instructions:
1. Forecast must start from the next time point after the Recent Subsequence
2. Use Historical Representatives and their patterns to guide prediction
3. Consider both Recent Subsequence dynamics and matched historical patterns

Output Format:
[float_1, float_2, ..., float_48]

Rules:
- Exactly 48 floats
- No prior data included
- No extra text or formatting

STEP 3: IMPACT SCORE (I-score) COMPUTATION
Goal: Compute the contribution of each Historical Representative Subsequence to the final forecast.

Instructions:
1. Assign a normalized I-score to each representative
2. Sum of all scores must equal 1.00
3. Use Pattern Priority to guide weight distribution
4. Maintain input order (R1, R2, ..., Rn)
5. Each I-score must be a float with exactly 3 decimal places
6. The Count of output I-score must equal the Count of representative sequences

Output Format:
[I-score_1, I-score_2, ..., I-score_n]

FINAL OUTPUT FORMAT
All three components should be returned in a single valid JSON object:

{
  "Pattern_Labels": ["Outlier, Level Shift", ..., "Volatility, Decreased"],
  "Pred_Series": [-0.3845145903792176, ..., -0.25595734759639727],
  "Impact_Scores": [0.123, ..., 0.987]
}

CRITICAL RULES
- Output must be strictly valid JSON, with no extra text
- Numerical precision:
  - Pred_Series: standard float
  - Impact_Scores: exactly 3 decimal places
- Pattern_Labels: follow input ID order
- Impact_Scores: preserve order of representative subsequences
